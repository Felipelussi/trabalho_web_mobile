/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SalesIndexRouteImport } from './routes/sales/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as SalesAddRouteImport } from './routes/sales/add'
import { Route as ProductsAddRouteImport } from './routes/products/add'
import { Route as SalesIdEditRouteImport } from './routes/sales/$id.edit'
import { Route as ProductsIdViewRouteImport } from './routes/products/$id.view'
import { Route as ProductsIdEditRouteImport } from './routes/products/$id.edit'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SalesIndexRoute = SalesIndexRouteImport.update({
  id: '/sales/',
  path: '/sales/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const SalesAddRoute = SalesAddRouteImport.update({
  id: '/sales/add',
  path: '/sales/add',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsAddRoute = ProductsAddRouteImport.update({
  id: '/products/add',
  path: '/products/add',
  getParentRoute: () => rootRouteImport,
} as any)
const SalesIdEditRoute = SalesIdEditRouteImport.update({
  id: '/sales/$id/edit',
  path: '/sales/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdViewRoute = ProductsIdViewRouteImport.update({
  id: '/products/$id/view',
  path: '/products/$id/view',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdEditRoute = ProductsIdEditRouteImport.update({
  id: '/products/$id/edit',
  path: '/products/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products/add': typeof ProductsAddRoute
  '/sales/add': typeof SalesAddRoute
  '/products': typeof ProductsIndexRoute
  '/sales': typeof SalesIndexRoute
  '/products/$id/edit': typeof ProductsIdEditRoute
  '/products/$id/view': typeof ProductsIdViewRoute
  '/sales/$id/edit': typeof SalesIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products/add': typeof ProductsAddRoute
  '/sales/add': typeof SalesAddRoute
  '/products': typeof ProductsIndexRoute
  '/sales': typeof SalesIndexRoute
  '/products/$id/edit': typeof ProductsIdEditRoute
  '/products/$id/view': typeof ProductsIdViewRoute
  '/sales/$id/edit': typeof SalesIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/products/add': typeof ProductsAddRoute
  '/sales/add': typeof SalesAddRoute
  '/products/': typeof ProductsIndexRoute
  '/sales/': typeof SalesIndexRoute
  '/products/$id/edit': typeof ProductsIdEditRoute
  '/products/$id/view': typeof ProductsIdViewRoute
  '/sales/$id/edit': typeof SalesIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/products/add'
    | '/sales/add'
    | '/products'
    | '/sales'
    | '/products/$id/edit'
    | '/products/$id/view'
    | '/sales/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/products/add'
    | '/sales/add'
    | '/products'
    | '/sales'
    | '/products/$id/edit'
    | '/products/$id/view'
    | '/sales/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/products/add'
    | '/sales/add'
    | '/products/'
    | '/sales/'
    | '/products/$id/edit'
    | '/products/$id/view'
    | '/sales/$id/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsAddRoute: typeof ProductsAddRoute
  SalesAddRoute: typeof SalesAddRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  SalesIndexRoute: typeof SalesIndexRoute
  ProductsIdEditRoute: typeof ProductsIdEditRoute
  ProductsIdViewRoute: typeof ProductsIdViewRoute
  SalesIdEditRoute: typeof SalesIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sales/': {
      id: '/sales/'
      path: '/sales'
      fullPath: '/sales'
      preLoaderRoute: typeof SalesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sales/add': {
      id: '/sales/add'
      path: '/sales/add'
      fullPath: '/sales/add'
      preLoaderRoute: typeof SalesAddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/add': {
      id: '/products/add'
      path: '/products/add'
      fullPath: '/products/add'
      preLoaderRoute: typeof ProductsAddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sales/$id/edit': {
      id: '/sales/$id/edit'
      path: '/sales/$id/edit'
      fullPath: '/sales/$id/edit'
      preLoaderRoute: typeof SalesIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id/view': {
      id: '/products/$id/view'
      path: '/products/$id/view'
      fullPath: '/products/$id/view'
      preLoaderRoute: typeof ProductsIdViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id/edit': {
      id: '/products/$id/edit'
      path: '/products/$id/edit'
      fullPath: '/products/$id/edit'
      preLoaderRoute: typeof ProductsIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsAddRoute: ProductsAddRoute,
  SalesAddRoute: SalesAddRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  SalesIndexRoute: SalesIndexRoute,
  ProductsIdEditRoute: ProductsIdEditRoute,
  ProductsIdViewRoute: ProductsIdViewRoute,
  SalesIdEditRoute: SalesIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
