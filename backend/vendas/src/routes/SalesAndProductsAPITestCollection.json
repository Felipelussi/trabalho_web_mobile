{
  "info": {
    "name": "Sales and Products API - Final Version",
    "description": "Complete test collection for the final version of sales and products management API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId2",
      "value": "",
      "type": "string"
    },
    {
      "key": "saleId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has status ok', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql('ok');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Create Product 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gaming Laptop\",\n  \"price\": 2500\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Product created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.eql('Gaming Laptop');",
                  "    pm.expect(jsonData.price).to.eql(2500);",
                  "    ",
                  "    pm.collectionVariables.set('productId', jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Product 2",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Wireless Mouse\",\n  \"price\": 150\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Product created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.eql('Wireless Mouse');",
                  "    pm.expect(jsonData.price).to.eql(150);",
                  "    ",
                  "    pm.collectionVariables.set('productId2', jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.at.least(2);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product details returned', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gaming Laptop Pro\",\n  \"price\": 3000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product updated successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql('Gaming Laptop Pro');",
                  "    pm.expect(jsonData.price).to.eql(3000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Sales",
      "item": [
        {
          "name": "List All Sales",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/sales",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Sales have correct structure', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('date');",
                  "        pm.expect(jsonData[0]).to.have.property('total');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Empty Sale",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sale created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Sale created successfully');",
                  "    pm.expect(jsonData.sale).to.have.property('id');",
                  "    ",
                  "    pm.collectionVariables.set('saleId', jsonData.sale.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Sale with Products",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"products\": [\n    {\n      \"productId\": {{productId}},\n      \"price\": 2800,\n      \"qtd\": 1,\n      \"discount\": 100\n    },\n    {\n      \"productId\": {{productId2}},\n      \"price\": 140,\n      \"qtd\": 2,\n      \"discount\": 10\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sale with products created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Sale created successfully');",
                  "    pm.expect(jsonData.sale).to.have.property('saleProducts');",
                  "    pm.expect(jsonData.sale.saleProducts).to.have.lengthOf(2);",
                  "    ",
                  "    // Verify unit prices are set correctly",
                  "    const laptop = jsonData.sale.saleProducts.find(sp => sp.product_id == pm.collectionVariables.get('productId'));",
                  "    const mouse = jsonData.sale.saleProducts.find(sp => sp.product_id == pm.collectionVariables.get('productId2'));",
                  "    ",
                  "    pm.expect(laptop.unit_price).to.eql(2800);",
                  "    pm.expect(laptop.qtd).to.eql(1);",
                  "    pm.expect(laptop.discount).to.eql(100);",
                  "    ",
                  "    pm.expect(mouse.unit_price).to.eql(140);",
                  "    pm.expect(mouse.qtd).to.eql(2);",
                  "    pm.expect(mouse.discount).to.eql(10);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Sale - Invalid Product Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"products\": [\n    {\n      \"productId\": {{productId}},\n      \"price\": 2500,\n      \"qtd\": -1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for invalid quantity', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Each product must have productId and valid qtd');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Sale - Non-existent Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"products\": [\n    {\n      \"productId\": 99999,\n      \"price\": 1000,\n      \"qtd\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message for non-existent product', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('One or more products not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Sale by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/sales/{{saleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "{{saleId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sale details returned with correct structure', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('date');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('products');",
                  "    pm.expect(jsonData.products).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Product prices come from unit_price field', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.products && jsonData.products.length > 0) {",
                  "        // Check that price field exists and is numeric",
                  "        jsonData.products.forEach(product => {",
                  "            pm.expect(product).to.have.property('price');",
                  "            pm.expect(product).to.have.property('qtd');",
                  "            pm.expect(product).to.have.property('discount');",
                  "            pm.expect(typeof product.price).to.eql('number');",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Sale - Not Found",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/sales/99999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "99999"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Sale not found message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Sale not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Sale",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"products\": [\n    {\n      \"productId\": {{productId}},\n      \"price\": 2900,\n      \"qtd\": 2,\n      \"discount\": 200\n    },\n    {\n      \"productId\": {{productId2}},\n      \"price\": 130,\n      \"qtd\": 3,\n      \"discount\": 15\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales/{{saleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "{{saleId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sale updated successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Sale updated successfully');",
                  "    pm.expect(jsonData.sale).to.have.property('saleProducts');",
                  "    pm.expect(jsonData.sale.saleProducts).to.have.lengthOf(2);",
                  "    ",
                  "    // Verify updated quantities and prices",
                  "    const laptop = jsonData.sale.saleProducts.find(sp => sp.product_id == pm.collectionVariables.get('productId'));",
                  "    const mouse = jsonData.sale.saleProducts.find(sp => sp.product_id == pm.collectionVariables.get('productId2'));",
                  "    ",
                  "    pm.expect(laptop.unit_price).to.eql(2900);",
                  "    pm.expect(laptop.qtd).to.eql(2);",
                  "    pm.expect(laptop.discount).to.eql(200);",
                  "    ",
                  "    pm.expect(mouse.unit_price).to.eql(130);",
                  "    pm.expect(mouse.qtd).to.eql(3);",
                  "    pm.expect(mouse.discount).to.eql(15);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Sale - Missing Products Array",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales/{{saleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "{{saleId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for missing products', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('products array is required');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Sale - Invalid Product Data",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"products\": [\n    {\n      \"productId\": {{productId}},\n      \"price\": 2500,\n      \"qtd\": -1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales/{{saleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "{{saleId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for invalid quantity', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Each product must have productId and valid qtd');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Sale - Not Found",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"products\": [\n    {\n      \"productId\": {{productId}},\n      \"price\": 2500,\n      \"qtd\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales/99999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "99999"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Sale not found message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Sale not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Sale - Non-existent Product",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"products\": [\n    {\n      \"productId\": 99999,\n      \"price\": 1000,\n      \"qtd\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sales/{{saleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "{{saleId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message for non-existent product', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('One or more products not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Cleanup",
      "item": [
        {
          "name": "Delete Sale",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/sales/{{saleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "{{saleId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Sale - Not Found",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/sales/99999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sales", "99999"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Sale not found message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Sale not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Product 1",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Product 2",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId2}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId2}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
